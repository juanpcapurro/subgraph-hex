type GlobalState @entity {
  "there's only one GlobalState and it has id 'global'"
  id: ID!
  lockedHeartsTotalRaw: BigInt!
  nextStakeSharesTotalRaw: BigInt!
  shareRateRaw: BigInt!
  stakePenaltyTotalRaw: BigInt!
  dailyDataCountRaw: BigInt!
  stakeSharesTotalRaw: BigInt!
  latestStakeIdRaw: BigInt!
  unclaimedSatoshisTotalRaw: BigInt!
  claimedSatoshisTotalRaw: BigInt!
  claimedBtcAddrCountRaw: BigInt!
  totalSupplyRaw: BigInt!
  xfLobbyForCurrentDayRaw: BigInt!
}

type ShareRateChange @entity {
  "it's set to the stakeId since each stake triggers zero or one of this"
  id: ID! 
  blockNumber: BigInt!
  differenceRaw: BigInt!
  oldShareRateRaw: BigInt!
  newShareRateRaw: BigInt!
}

type StakeStart @entity {
  "it's set to the stakeId, stakes can only start once"
  id: ID!
  data0: Bytes!
  stakerAddr: Bytes! # address
  blockNumber: BigInt!
  stakedHeartsRaw: BigInt!
  stakeSharesRaw: BigInt!
  stakedDays: BigInt!
  isAutoStake: Boolean!
}

type StakeEnd @entity {
  "it's set to the stakeId, stakes can only end once"
  id: ID!
  data0: Bytes!
  data1: Bytes!
  blockNumber: BigInt!
  stakedHeartsRaw: BigInt!
  stakeSharesRaw: BigInt!
  payoutRaw: BigInt!
  penaltyRaw: BigInt!
  servedDays: BigInt!
  prevUnlocked: Boolean!
}

type Stake @entity {
  "equals stakeId in the contract"
  id: ID!
  stakerAddr: Bytes! # address
  stakedHeartsRaw: BigInt!
  stakeSharesRaw: BigInt!
  "length of the stake when is created"
  stakedDays: BigInt!
  "how many days the stake actually lasted"
  servedDays: BigInt
  "day the stake was redeemed. null if it is still running"
  unlockDay: BigInt
  "day the tokens were staked"
  lockDay: BigInt!
  payoutRaw: BigInt
  penaltyRaw: BigInt
  hadGoodAccounting: Boolean
  isAutoStake: Boolean!
}
