type GlobalState @entity {
  id: ID! # idk, it should be zero or something
  lockedHeartsTotalRaw: BigInt!
  nextStakeSharesTotalRaw: BigInt!
  shareRateRaw: BigInt!
  stakePenaltyTotalRaw: BigInt!
  dailyDataCountRaw: BigInt!
  stakeSharesTotalRaw: BigInt!
  latestStakeIdRaw: BigInt!
  unclaimedSatoshisTotalRaw: BigInt!
  claimedSatoshisTotalRaw: BigInt!
  claimedBtcAddrCountRaw: BigInt!
  totalSupplyRaw: BigInt!
  xfLobbyForCurrentDayRaw: BigInt!
}

type ShareRateChange @entity {
  id: ID! # it's set to the stakeId, I'm not sure what should go here
  blockNumber: BigInt!
  differenceRaw: BigInt!
  oldShareRateRaw: BigInt!
  newShareRateRaw: BigInt!
}

type StakeStart @entity {
  id: ID! # it's set to the stakeId, stakes can only start once
  data0: Bytes!
  stakerAddr: Bytes! # address
  blockNumber: BigInt!
  stakedHeartsRaw: BigInt!
  stakeSharesRaw: BigInt!
  stakedDays: BigInt!
  isAutoStake: Boolean!
}

type StakeEnd @entity {
  id: ID! # it's set to the stakeId, stakes can only end once
  blockNumber: BigInt!
  stakedHeartsRaw: BigInt!
  stakeSharesRaw: BigInt!
  payoutRaw: BigInt!
  penaltyRaw: BigInt!
  servedDays: BigInt!
  prevUnlocked: Boolean!
}

type Stake @entity {
  id: ID! # equals stakeId
  stakerAddr: Bytes! # address
  stakedHeartsRaw: BigInt!
  stakeSharesRaw: BigInt!
  stakedDays: BigInt! # length of the stake when is created
  servedDays: BigInt # how many days the stake actually lasted
  unlockDay: BigInt # day the stake was redeemed. null if it is still running
  lockDay: BigInt! # day the tokens were staked
  payoutRaw: BigInt
  penaltyRaw: BigInt
  hadGoodAccounting: Boolean
  isAutoStake: Boolean!
}
